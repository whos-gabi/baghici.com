<!-- views/pages/getintouch.ejs -->
<div class="container mx-auto my-16 px-4 text-center" data-aos="fade-up">
  <h1 class="text-4xl font-bold mb-4"><%= t('get_in_touch') %></h1>
  <p class="text-xl max-w-md mx-auto mb-6 mt-6">
    <%= t('lets_make_something_big') %>
  </p>

  <div class="w-full mt-12 mb-5">
    <div class="relative w-full h-64 bg-black rounded-lg overflow-hidden">
      <canvas id="graph" class="w-full h-full"></canvas>
    </div>
  </div>

  <div class="my-12">
    <div class="flex flex-col md:flex-row md:justify-center md:space-x-4">
      <a
        href="https://t.me/cyberbroski"
        class="bg-gold text-black px-6 py-2 rounded-full hover:bg-white transition duration-300 w-full md:w-auto block mb-2 md:mb-0"
      >
        Telegram
      </a>
      <a
        href="https://instagram.com/whos_gabi_"
        class="bg-gold text-black px-6 py-2 rounded-full hover:bg-white transition duration-300 w-full md:w-auto block mb-2 md:mb-0"
      >
        Instagram
      </a>
      <a
        href="https://wa.me/40730792946"
        class="bg-gold text-black px-6 py-2 rounded-full hover:bg-white transition duration-300 w-full md:w-auto block mb-2 md:mb-0"
      >
        WhatsApp
      </a>
      <a
        href="https://github.com/whos-gabi"
        class="bg-gold text-black px-6 py-2 rounded-full hover:bg-white transition duration-300 w-full md:w-auto block"
      >
        GitHub
      </a>
    </div>
  </div>
</div>

<script>
  const canvas = document.getElementById("graph");
  const ctx = canvas.getContext("2d");

  function resizeCanvas() {
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
  }

  // Resize the canvas to fill its container
  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();

  let data = [];
  const maxDataPoints = 100;

  function drawGraph() {
    const width = canvas.width;
    const height = canvas.height;

    // Clear the canvas
    ctx.clearRect(0, 0, width, height);

    // Set styles
    ctx.strokeStyle = "#FFD700"; // Gold color
    ctx.lineWidth = 2;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";

    // Begin path
    ctx.beginPath();
    ctx.moveTo(0, height - data[0]);

    // Draw the line
    for (let i = 1; i < data.length; i++) {
      const x = (i * width) / maxDataPoints;
      const y = height - data[i];
      ctx.lineTo(x, y);
    }

    // Stroke the path
    ctx.stroke();

    // Optionally, fill under the graph for a nicer effect
    ctx.lineTo(width, height);
    ctx.lineTo(0, height);
    ctx.closePath();

    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, "rgba(255, 215, 0, 0.4)"); // Semi-transparent gold
    gradient.addColorStop(1, "rgba(255, 215, 0, 0)"); // Transparent

    ctx.fillStyle = gradient;
    ctx.fill();
  }

  function updateData() {
    const height = canvas.height;
    let lastValue = data.length ? data[data.length - 1] : height / 2;

    // Random change between -10 and +10
    const change = Math.random() * 30 - 15;
    let newValue = lastValue + change;

    // Keep the value within the canvas height and above 40% of the height
    newValue = Math.max(height * 0.4, Math.min(height, newValue));

    // Add the new value to the data array
    data.push(newValue);

    // Limit the data array length
    if (data.length > maxDataPoints) {
      data.shift();
    }

    // Redraw the graph
    drawGraph();
  }

  // Update the graph every 500ms
  setInterval(updateData, 80);
</script>
